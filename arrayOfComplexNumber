public class ComplexNum1 {
	private double r;
	private double theta;
	private double real; // real part
	private double imag; //imaginary part
	
	//default constructor.
	//set real = imag = 0;
	ComplexNum1()
	{
		r = 0.0;
		theta = 0.0;
		real = 0.0;
		imag = 0.0;
	}
	
	//specific constructor
	//use this. keyword to set private variables
	ComplexNum1(double real, double imag)
	{
		this.real = real;
		this.imag = imag;
		polarize();
	}
	
	public double getR() {
		return real;
	}
	
	public double getI() {
		return imag;
	}
	
	public double getr() {
		return r;
	}
	
	public double getT() {
		return theta;
	}
	
	public void setI(double i) {
		this.imag = i;
	}
	
	public void setR(double r) {
		this.real = r;
	}
	
	//add a complex number to this
	//complex number. return a ComplexNum
	public ComplexNum1 plus(ComplexNum1 a)
	{	
		ComplexNum1 b = new ComplexNum1 ();
		b.imag = (a.getI()+ this.imag);
		b.real = (a.getR()+ this.real);
		return(b);
	}
	
	//subtract
	public ComplexNum1 minus(ComplexNum1 a)
	{
		ComplexNum1 b = new ComplexNum1 ();
		b.imag = (this.imag - a.getI());
		b.real = (this.real - a.getR());
		return(b);
	}
	
	public ComplexNum1 times(ComplexNum1 a)
	{
		ComplexNum1 b = new ComplexNum1 ();
		double Sq = ((-1)*this.getI()*a.getI())+(this.getR()*a.getR());
		b.imag = this.getI()*a.getR()+this.getR()*a.getI();
		b.real = Sq;
		return(b);
	}
	
	// return the complex conjugate
	public ComplexNum1 conjugate()
	{
		
		this.imag=-imag;
		return(this);
		
	}
	
	// return the rationalized version of this 
	// complex number.
	// 1/(a+bi) where a+bi is the current object
	public ComplexNum1 rationalize()
	{
		
		double Sq = (this.getI()*this.getI())+(this.getR()*this.getR());
		this.real = (this.getR()/Sq);
		this.imag = (-this.getI()/Sq);
		return(this);
	}
	
	public void polarize()
	{
		double Sq = (this.getI()*this.getI())+(this.getR()*this.getR());
		r = Math.sqrt(Sq);
		theta = Math.atan(this.imag/this.real);
	}
	
	public int equals(ComplexNum1 a) {
		int out=0;
		if(Math.abs(this.getr()-a.getr())<0.001) {
			return 0;
		}
		else {
			return -1;
		}
		
	}
	
	public int compareTo(ComplexNum1 a) {
		if(this.equals(a)==1) {
			return 0;
		}
		else if(this.getr()<a.getr()) {
			return 1;
		}
		else {
			return -1;	
		}
		
	}
	
	public String toString(){
		String out = " ";
		// write code here to return a string
		// in the form a + bi
		out = Double.toString(this.getR())+" + "+Double.toString(this.getI())+"i";
		return (out);
	}
}

import java.io.File;
import java.util.Scanner;

public class ComplexRunner1 {

	static void bubbleSort(ComplexNum1 [] a) {
		for(int i = 0; i<a.length; i++) {
			for(int j = i+1; j<a.length; j++) {
				
				if(a[i].compareTo(a[j])==-1) {
					ComplexNum1 temp = a[i];
					a[i]=a[j];
					a[j]=temp;
				}  
				else {
					
				}
			}
		}
		
	}
	
	

	  public static void main(String[] args) throws Exception{
	      // pass the path to the file as a parameter
	      //File file = new File("C:\\Users\\lkubik\\Documents\\java\\test.txt");
	    File file = new File("H:\\cnarray.txt");
	    Scanner sc = new Scanner(file);
	    ComplexNum1 [] n = new ComplexNum1[10];
	  
	    int count = 0;
	    while(sc.hasNextLine())
	    {
	    	int a = sc.nextInt();
	    	int b = sc.nextInt();
	    	n[count] = new ComplexNum1(a,b);
	    	count++;
	  }
	    
	   for(int i = 0; i<n.length; i++) {
			  System.out.println(n[i].toString());
	  }
	   
	  bubbleSort(n);
	  System.out.println();
	  for(int i = 0; i<n.length; i++) {
		  System.out.println(n[i].toString());
	  }
	
	}
	

}
